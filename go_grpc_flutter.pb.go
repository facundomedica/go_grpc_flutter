// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go_grpc_flutter.proto

package go_grpc_flutter // import "github.com/facundomedica/go_grpc_flutter"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// AuthRequest is used both in Login and Register.
// You usually want this to be different at Register,
// because you want more data than user and password
type AuthRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_go_grpc_flutter_ebc2a5c85ce5f8da, []int{0}
}
func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (dst *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(dst, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// AuthResponse contains the token that the client will use
// to "let the server know who it is talking with"
type AuthResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_go_grpc_flutter_ebc2a5c85ce5f8da, []int{1}
}
func (m *AuthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResponse.Unmarshal(m, b)
}
func (m *AuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResponse.Marshal(b, m, deterministic)
}
func (dst *AuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResponse.Merge(dst, src)
}
func (m *AuthResponse) XXX_Size() int {
	return xxx_messageInfo_AuthResponse.Size(m)
}
func (m *AuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResponse proto.InternalMessageInfo

func (m *AuthResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Empty exists because we don't always need to send/receive data
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_go_grpc_flutter_ebc2a5c85ce5f8da, []int{2}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// Task is our simple task
type Task struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Completed            bool     `protobuf:"varint,4,opt,name=completed,proto3" json:"completed,omitempty"`
	Owner                string   `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_go_grpc_flutter_ebc2a5c85ce5f8da, []int{3}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (dst *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(dst, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *Task) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthRequest)(nil), "go_grpc_flutter.AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "go_grpc_flutter.AuthResponse")
	proto.RegisterType((*Empty)(nil), "go_grpc_flutter.Empty")
	proto.RegisterType((*Task)(nil), "go_grpc_flutter.Task")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/go_grpc_flutter.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/go_grpc_flutter.Auth/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
	Register(context.Context, *AuthRequest) (*AuthResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_grpc_flutter.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_grpc_flutter.Auth/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc_flutter.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_grpc_flutter.proto",
}

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TasksClient interface {
	ListTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Tasks_ListTasksClient, error)
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	DeleteTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
}

type tasksClient struct {
	cc *grpc.ClientConn
}

func NewTasksClient(cc *grpc.ClientConn) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) ListTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Tasks_ListTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tasks_serviceDesc.Streams[0], "/go_grpc_flutter.Tasks/ListTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &tasksListTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tasks_ListTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type tasksListTasksClient struct {
	grpc.ClientStream
}

func (x *tasksListTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tasksClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/go_grpc_flutter.Tasks/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/go_grpc_flutter.Tasks/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) DeleteTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/go_grpc_flutter.Tasks/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
type TasksServer interface {
	ListTasks(*Empty, Tasks_ListTasksServer) error
	CreateTask(context.Context, *Task) (*Task, error)
	UpdateTask(context.Context, *Task) (*Task, error)
	DeleteTask(context.Context, *Task) (*Empty, error)
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_ListTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TasksServer).ListTasks(m, &tasksListTasksServer{stream})
}

type Tasks_ListTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type tasksListTasksServer struct {
	grpc.ServerStream
}

func (x *tasksListTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _Tasks_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_grpc_flutter.Tasks/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_grpc_flutter.Tasks/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_grpc_flutter.Tasks/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).DeleteTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc_flutter.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Tasks_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Tasks_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Tasks_DeleteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTasks",
			Handler:       _Tasks_ListTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "go_grpc_flutter.proto",
}

func init() {
	proto.RegisterFile("go_grpc_flutter.proto", fileDescriptor_go_grpc_flutter_ebc2a5c85ce5f8da)
}

var fileDescriptor_go_grpc_flutter_ebc2a5c85ce5f8da = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x69, 0xa1, 0x0a, 0xa3, 0xd1, 0x64, 0x23, 0xa6, 0x21, 0x98, 0x90, 0xc6, 0x03, 0xf1,
	0x00, 0x06, 0xaf, 0x6a, 0xe2, 0x1f, 0x4c, 0x4c, 0x38, 0x35, 0x7a, 0xf1, 0x42, 0x4a, 0x3b, 0x94,
	0x0d, 0xb4, 0xbb, 0xee, 0x4e, 0x43, 0xbc, 0x78, 0xf0, 0x5b, 0xf8, 0x6d, 0xcd, 0xb6, 0x28, 0x06,
	0xc4, 0x83, 0x1e, 0xdf, 0x9b, 0xf9, 0xbd, 0x76, 0x5e, 0x0b, 0xf5, 0x58, 0x0c, 0x63, 0x25, 0xc3,
	0xe1, 0x78, 0x96, 0x11, 0xa1, 0xea, 0x48, 0x25, 0x48, 0xb0, 0xfd, 0x15, 0xdb, 0xeb, 0xc3, 0xce,
	0x55, 0x46, 0x13, 0x1f, 0x9f, 0x33, 0xd4, 0xc4, 0x1a, 0x50, 0xcd, 0x34, 0xaa, 0x34, 0x48, 0xd0,
	0xb5, 0x5a, 0x56, 0xbb, 0xe6, 0x7f, 0x69, 0x33, 0x93, 0x81, 0xd6, 0x73, 0xa1, 0x22, 0xd7, 0x2e,
	0x66, 0x9f, 0xda, 0x3b, 0x86, 0xdd, 0x22, 0x46, 0x4b, 0x91, 0x6a, 0x64, 0x07, 0xe0, 0x90, 0x98,
	0x62, 0xba, 0x08, 0x29, 0x84, 0xb7, 0x0d, 0x4e, 0x3f, 0x91, 0xf4, 0xe2, 0xbd, 0x42, 0xe5, 0x21,
	0xd0, 0x53, 0xb6, 0x07, 0x36, 0x8f, 0x16, 0x3b, 0x36, 0x8f, 0x58, 0x13, 0x6a, 0xc4, 0x13, 0xd4,
	0x14, 0x24, 0x32, 0x7f, 0x46, 0xd9, 0x5f, 0x1a, 0x79, 0x28, 0xa7, 0x19, 0xba, 0xe5, 0x45, 0xa8,
	0x11, 0x86, 0x09, 0x45, 0x22, 0x67, 0x48, 0x18, 0xb9, 0x95, 0x96, 0xd5, 0xae, 0xfa, 0x4b, 0xc3,
	0x30, 0x62, 0x9e, 0xa2, 0x72, 0x9d, 0x82, 0xc9, 0x45, 0xef, 0xdd, 0x82, 0x8a, 0x79, 0x5f, 0x76,
	0x07, 0xce, 0x40, 0xc4, 0x3c, 0x65, 0xcd, 0xce, 0x6a, 0x61, 0xdf, 0x6a, 0x69, 0x1c, 0x6d, 0x98,
	0x16, 0xd7, 0x7a, 0x25, 0x76, 0x0f, 0x55, 0x1f, 0x63, 0xae, 0x09, 0xd5, 0x3f, 0xa3, 0x7a, 0x6f,
	0x36, 0x38, 0xa6, 0x1c, 0xcd, 0x2e, 0xa1, 0x36, 0xe0, 0x9a, 0x0a, 0x71, 0xb8, 0xc6, 0xe5, 0x55,
	0x36, 0xea, 0x6b, 0xbe, 0xd9, 0xf7, 0x4a, 0xa7, 0x16, 0x3b, 0x07, 0xb8, 0x51, 0x18, 0x10, 0xe6,
	0x5d, 0xff, 0xbc, 0xb8, 0x91, 0x37, 0xf4, 0xa3, 0x8c, 0xfe, 0x4a, 0x5f, 0x00, 0xdc, 0xa2, 0xf9,
	0x04, 0xbf, 0xd1, 0x1b, 0x6e, 0xf2, 0x4a, 0xd7, 0x27, 0x4f, 0xed, 0x98, 0xd3, 0x24, 0x1b, 0x75,
	0x42, 0x91, 0x74, 0xc7, 0x41, 0x98, 0xa5, 0x91, 0x48, 0x30, 0xe2, 0x61, 0xd0, 0x5d, 0x61, 0x46,
	0x5b, 0xf9, 0xaf, 0x7d, 0xf6, 0x11, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x0d, 0xca, 0x11, 0xf3, 0x02,
	0x00, 0x00,
}
